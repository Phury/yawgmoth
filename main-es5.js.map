{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/collection/collection.component.ts","webpack:///src/app/components/collection/collection.component.html","webpack:///src/app/components/deck-card/deck-card.component.ts","webpack:///src/app/components/deck-card/deck-card.component.html","webpack:///src/app/components/deck-list/deck-list.component.ts","webpack:///src/app/components/deck-list/deck-list.component.html","webpack:///src/app/components/deck/deck.component.ts","webpack:///src/app/components/deck/deck.component.html","webpack:///src/app/components/mana/mana.component.ts","webpack:///src/app/components/mana/mana.component.html","webpack:///src/app/components/spinner-card/spinner-card.component.ts","webpack:///src/app/components/spinner-card/spinner-card.component.html","webpack:///src/app/env.ts","webpack:///src/app/layouts/default-layout/default-layout.component.ts","webpack:///src/app/layouts/default-layout/default-layout.component.html","webpack:///src/app/layouts/navigation/navigation.component.ts","webpack:///src/app/layouts/navigation/navigation.component.html","webpack:///src/app/services/csv.service.ts","webpack:///src/app/services/deck.service.ts","webpack:///src/app/services/mtg.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","appRoutes","path","component","data","children","redirectTo","pathMatch","AppModule","forRoot","declarations","imports","providers","bootstrap","CollectionComponent","DeckCardComponent","mtgService","env","previewCard$","getCardByName","meta","previewCard","DeckListComponent","deckService","meta$","listAllMetadata","selectedCard$","DeckComponent","route","deckId","parent","snapshot","url","findMetadataById","deck$","pipe","getDeckById","deck","cards","card","next","filters","showContent","section","ManaComponent","cost","split","filter","str","trim","map","token","toLowerCase","replace","SpinnerCardComponent","spinnerCard","randomSpinner","spinners","Math","floor","random","length","DEBUG","DefaultLayoutComponent","NavigationComponent","CsvService","csv","csvFull","csvHeader","csvData","splice","row","reduce","acc","cells","obj","forEach","el","i","push","providedIn","DeckService","http","csvService","get","responseType","parse","deckTxt","cards$","line","parseCardLine","proto","getCard","o","name","cardTuple","amount","cardLine","tokens","cardName","slice","join","cardAmount","Number","MtgService","mtgCard","externalId","typeLine","oracleText","imgUrl","imgArtUrl","cmc","manaCost","rarity","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent implements OnInit {\n  title = 'yawgmoth';\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n}\n","<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { DefaultLayoutComponent } from './layouts/default-layout/default-layout.component';\nimport { SpinnerCardComponent } from './components/spinner-card/spinner-card.component';\nimport { ManaComponent } from './components/mana/mana.component';\nimport { DeckComponent } from './components/deck/deck.component';\nimport { DeckListComponent } from './components/deck-list/deck-list.component';\nimport { CollectionComponent } from './components/collection/collection.component';\nimport { DeckCardComponent } from './components/deck-card/deck-card.component';\nimport { NavigationComponent } from './layouts/navigation/navigation.component';\n\nconst appRoutes: Routes = [\n  //{ path: 'decks/:id',      component: HeroDetailComponent },\n  {\n    path: 'decks',\n    component: DefaultLayoutComponent,\n    data: { title: 'Your decks' },\n    children: [\n      { path: '', component: DeckListComponent },\n    ]\n  },\n  {\n    path: 'decks/:id',\n    component: DefaultLayoutComponent,\n    data: { title: 'Deck details' },\n    children: [\n    { path: '', component: DeckComponent },\n    ]\n  },\n  {\n    path: 'collection',\n    component: DefaultLayoutComponent,\n    data: { title: 'Your collection' },\n    children: [\n      { path: '', component: CollectionComponent },\n    ]\n  },\n  {\n    path: '',\n    redirectTo: '/decks',\n    pathMatch: 'full'\n  },\n  //{ path: '**', component: PageNotFoundComponent }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DeckComponent,\n    SpinnerCardComponent,\n    ManaComponent,\n    DeckListComponent,\n    CollectionComponent,\n    DefaultLayoutComponent,\n    DeckCardComponent,\n    NavigationComponent\n  ],\n  imports: [\n    RouterModule.forRoot(appRoutes), //, { enableTracing: true }),\n    BrowserModule,\n    HttpClientModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ygm-collection',\n  templateUrl: './collection.component.html',\n})\nexport class CollectionComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>collection works!</p>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport * as env from '../../env';\nimport { Deck, DeckMeta } from '../../model/deck';\nimport { Card } from '../../model/card';\nimport { MtgService } from '../../services/mtg.service';\n\n@Component({\n  selector: 'ygm-deck-card',\n  templateUrl: './deck-card.component.html',\n})\nexport class DeckCardComponent implements OnInit {\n  readonly env = env;\n  @Input() meta: DeckMeta;\n  previewCard$: Observable<Card>;\n\n  constructor(private mtgService: MtgService) { }\n\n  ngOnInit(): void {\n    this.previewCard$ = this.mtgService.getCardByName(this.meta.previewCard);\n  }\n\n}\n","<div class=\"card\" *ngIf=\"(previewCard$ | async) as card\">\n  <div class=\"card-image\">\n    <img src=\"{{card.imgArtUrl}}\" class=\"img-responsive\" />\n  </div>\n  <div class=\"card-header\">\n    <div class=\"card-subtitle\">\n      <a [routerLink]=\"['/decks', meta.id]\" [state]=\"meta\" class=\"button\">{{meta.name}}</a>\n    </div>\n  </div>\n</div>\n<pre *ngIf=\"false\">\n{{meta | json}}\n{{previewCard$ | async | json}}\n</pre>\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DeckMeta } from '../../model/deck';\nimport { DeckService } from '../../services/deck.service';\n\n@Component({\n  selector: 'ygm-deck-list',\n  templateUrl: './deck-list.component.html',\n})\nexport class DeckListComponent implements OnInit {\n  meta$: Observable<DeckMeta[]>;\n\n  constructor(private deckService: DeckService) { }\n\n  ngOnInit(): void {\n    this.meta$ = this.deckService.listAllMetadata();\n  }\n\n}\n","<div class=\"columns deck-list\">\n  <div *ngFor=\"let meta of (meta$ | async)\" ng-class-odd=\"left\" class=\"column col-sm-6 col-4\">\n    <!--<ygm-deck [meta]=\"meta\"></ygm-deck>-->\n    <ygm-deck-card [meta]=\"meta\"></ygm-deck-card>\n  </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable, Subject } from 'rxjs';\nimport { map, flatMap, tap, catchError } from 'rxjs/operators';\nimport { Deck, DeckMeta } from '../../model/deck';\nimport { Card } from '../../model/card';\nimport { DeckService } from '../../services/deck.service';\n\n@Component({\n  selector: 'ygm-deck',\n  templateUrl: './deck.component.html',\n})\nexport class DeckComponent implements OnInit {\n  meta$: Observable<DeckMeta>;\n  deck$: Observable<Deck>;\n  selectedCard$: Subject<Card>;\n  filters: {showContent:boolean};\n\n  constructor(\n    public route: ActivatedRoute,\n    private deckService: DeckService) { }\n\n  ngOnInit(): void {\n    /*\n    TODO: get meta from state first\n    this.meta$ = this.route.paramMap.pipe(\n      map(() => window.history.state),\n      catchError(error => {\n        const deckId = this.route.parent.snapshot.url[1].path;\n        return this.deckService.getOne(deckId);\n      })\n    );\n    */\n    const deckId = this.route.parent.snapshot.url[1].path;\n    this.meta$ = this.deckService.findMetadataById(deckId);\n    this.deck$ = this.meta$.pipe(\n      flatMap(meta => this.deckService.getDeckById(meta.id))\n    );\n    this.selectedCard$ = new Subject<any>();\n    this.deck$.pipe(\n      map((deck: Deck) => deck.cards[0]),\n      tap(card => this.selectedCard$.next(card))\n    );\n    this.filters = { showContent: true };\n  }\n\n  toggleContent(section: {showContent:boolean}) {\n    section.showContent = !section.showContent;\n  }\n\n}\n","<div *ngIf=\"(meta$ | async) as meta\">\n  <h3>{{meta.name}}</h3>\n\n  <!--\n  <details class=\"accordion\">\n    <summary class=\"accordion-header\" [ngClass]=\"filters.showContent ? 'active' : ''\">\n      filters\n    </summary>\n    <div class=\"accordion-body\">\n      <p>filters here</p>\n    </div>\n  </details>\n  -->\n  \n  <div class=\"container\">\n\n    <div class=\"columns col-gapless\">\n      <div class=\"column col-3 col-sm-12\">\n        <img class=\"mtg-card\" src=\"{{(selectedCard$ | async)?.imgUrl}}\" (click)=\"selectedCard$.next()\" />\n        <!-- <ygm-spinner-card [card]=\"selectedCard$\"></ygm-spinner-card> -->\n      </div>\n      <div class=\"column col-9 col-sm-12 lg-list\">\n        <details class=\"accordion\" *ngFor=\"let card of (deck$ | async)?.cards\">\n          <summary class=\"accordion-header\" [ngClass]=\"card.showContent ? 'active' : ''\">\n            <i class=\"icon icon-photo\" (click)=\"toggleContent(card)\"></i>\n            {{card.amount}}\n            <span (click)=\"selectedCard$.next(card)\">{{card.name}}&nbsp;</span>\n            <ygm-mana [cost]=\"card.manaCost\"></ygm-mana>\n          </summary>\n          <div class=\"accordion-body\">\n            <div class=\"container\">\n              <div class=\"columns col-gapless\">\n                <div class=\"column col-3\">\n                  <img class=\"mtg-card\" src=\"{{card.imgUrl}}\" />\n                </div>\n                <div class=\"column col-9\">\n                  <p>{{card.name}}&nbsp;<ygm-mana [cost]=\"card.manaCost\"></ygm-mana></p>\n                  <p>{{card.typeLine}}</p>\n                  <p>{{card.oracleText}}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </details>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'ygm-mana',\n  templateUrl: './mana.component.html',\n})\nexport class ManaComponent implements OnInit {\n  @Input() cost: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  manaClasses(): string[][] { // TODO: compute on @Input setter\n    return this.cost.split(/{(.*?)}/)\n      .filter(str => str.trim() != \"\")\n      .map(token => token.toLowerCase().replace('/', ''))\n      .map(cost => ['ms', 'ms-cost', 'ms-'+cost]);\n  }\n}\n","<span class=\"mana\">\n  <i *ngFor=\"let symbols of manaClasses()\" [ngClass]=\"symbols\"></i>\n</span>\n\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'ygm-spinner-card',\n  templateUrl: './spinner-card.component.html',\n})\nexport class SpinnerCardComponent implements OnInit {\n  @Input() card: Observable<string>;\n  spinnerCard: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.spinnerCard = this.randomSpinner();\n  }\n\n  private randomSpinner() {\n    const spinners = [\"angel\", \"embalmed\", \"exerted\", \"goat\", \"knight ally\", \"soldier\", \"squirrel\", \"thopter\", \"angel\"];\n    return \"assets/tokens/\" + spinners[Math.floor(Math.random()*spinners.length)] + \".gif\";\n  }\n\n}\n","<div *ngIf=\"(card | async) as card\">\n  <!--<img src=\"http://gatherer.wizards.com/Handlers/Image.ashx?multiverseid=409619&amp;type=card\" />-->\n  <img class=\"mtg-card\" src=\"{{card}}\" />\n</div>\n<div *ngIf=\"!(card | async)\">\n  <img class=\"mtg-card\" src=\"{{spinnerCard}}\" />\n</div>\n","'use strict';\r\n\r\nexport const DEBUG=true;\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ygm-default-layout',\n  templateUrl: './default-layout.component.html',\n})\nexport class DefaultLayoutComponent implements OnInit {\n  title: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"layout\">\n  <header>\n\t\t<span class=\"dot w\"></span>\n\t\t<span class=\"dot u\"></span>\n\t\t<span class=\"dot b\"></span>\n\t\t<span class=\"dot r\"></span>\n\t\t<span class=\"dot g\"></span>\n\t\t<h1>Yawgmoth</h1>\n\t</header>\n  <ygm-navigation></ygm-navigation>\n  <div class=\"container\">\n    <router-outlet></router-outlet>\n  </div>\n  <footer>\n    <p>Coded by <a>PH</a></p>\n  </footer>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ygm-navigation',\n  templateUrl: './navigation.component.html',\n})\nexport class NavigationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<nav class=\"navbar\">\n\t<section class=\"navbar-section\">\n\t\t<a class=\"btn btn-link\" [routerLink]=\"['/decks']\">Decks</a>\n\t\t<a class=\"btn btn-link\" [routerLink]=\"['/collection']\">Collection</a>\n\t</section>\n\t\n\t<section class=\"navbar-section\">\t</section>\n</nav>","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CsvService {\n\n  constructor() { }\n\n  parse(csv: string): any[] {\n    const csvFull = csv.split(/\\r\\n|\\n/);\n    const csvHeader = csvFull[0].split(/\\t/);\n    const csvData = csvFull.splice(1);    \n\n    return csvData.filter(row => '' !== row).reduce((acc, row) => {\n      const cells = row.split(/\\t/);\n      const obj = {};\n      csvHeader.forEach((el, i) => {\n        obj[el] = cells[i];\n      });\n      acc.push(obj);\n      //console.log(acc);\n      return acc;\n    }, []);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, forkJoin, of } from 'rxjs';\nimport { flatMap, map, find } from 'rxjs/operators';\nimport { MtgService } from './mtg.service';\nimport { Deck, DeckMeta } from '../model/deck';\nimport { Card } from '../model/card';\nimport { CsvService } from './csv.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeckService {\n\n  constructor(\n    private http: HttpClient,\n    private mtgService: MtgService,\n    private csvService: CsvService) { }\n\n  public listAllMetadata(): Observable<DeckMeta[]> {\n    //return this.http.get<DeckMeta[]>('assets/decks.json');\n    return this.http.get('assets/decks.csv', { responseType: 'text'}).pipe(\n      flatMap(csv => of(this.csvService.parse(csv) as DeckMeta[]))\n    );\n  }\n\n  public findMetadataById(deckId: string): Observable<DeckMeta> {\n    return this.listAllMetadata().pipe(\n      flatMap(meta => meta),\n      find(meta => meta.id === deckId)\n    );\n  }\n\n  public getDeckById(deckId: string): Observable<Deck> {\n    return this.http.get('assets/decks/'+deckId+'.txt', { responseType: 'text' as 'json'}).pipe(\n      map((deckTxt: string) => {\n        const cards$ = deckTxt.split(/\\r?\\n/)\n            .filter(str => str && str.length > 0)\n            .map(line => this.parseCardLine(line))\n            .map(proto => this.getCard(proto)) // [Observable<Card>]\n        return forkJoin(cards$); // Observable<Card[]>\n      }),\n      flatMap(o => o),\n      map(cards => ({name: deckId, cards: cards})),\n    );\n  }\n\n  private getCard(cardTuple:{name: string, amount: number}): Observable<Card> {\n    return this.mtgService.getCardByName(cardTuple.name).pipe(\n      map(card => ({...card, amount: cardTuple.amount}))\n    );\n  }\n\n  private parseCardLine(cardLine: string):{name: string, amount: number} {\n    const tokens = cardLine.split(' ');\n    const cardName = tokens.slice(1).join(' ');\n    const cardAmount = Number(tokens[0]);\n    return { name: cardName, amount: cardAmount };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { of, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../model/card';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MtgService {\n\n  constructor(private http: HttpClient) { }\n\n  public getCardByName(cardName: string): Observable<Card> {\n    return this.http.get('https://api.scryfall.com/cards/named?exact='+cardName).pipe(\n      map(mtgCard => ({\n        externalId: mtgCard['id'],\n        name: mtgCard['name'],\n        typeLine: mtgCard['type_line'],\n        oracleText: mtgCard['oracle_text'],\n        imgUrl: mtgCard['image_uris']['normal'], //small, normal, large, png, art_crop, border_crop\n        imgArtUrl: mtgCard['image_uris']['art_crop'], //small, normal, large, png, art_crop, border_crop\n        cmc: mtgCard['cmc'],\n        manaCost: mtgCard['mana_cost'],\n        rarity: mtgCard['rarity'],\n        amount: 1,\n      }))\n    );\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}