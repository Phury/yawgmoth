{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/deck/deck.component.ts","webpack:///src/app/components/deck/deck.component.html","webpack:///src/app/components/mana/mana.component.ts","webpack:///src/app/components/mana/mana.component.html","webpack:///src/app/components/spinner-card/spinner-card.component.ts","webpack:///src/app/components/spinner-card/spinner-card.component.html","webpack:///src/app/env.ts","webpack:///src/app/services/deck.service.ts","webpack:///src/app/services/mtg.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","deckService","env","title","meta$","list","selector","templateUrl","AppModule","declarations","imports","providers","bootstrap","selectedCard$","DeckComponent","deck$","getOne","meta","pipe","deck","cards","card","next","ManaComponent","cost","split","filter","str","trim","map","token","toLowerCase","replace","SpinnerCardComponent","spinnerCard","randomSpinner","spinners","Math","floor","random","length","DEBUG","DeckService","http","mtgService","get","deckId","responseType","deckTxt","cards$","line","parseCardLine","proto","getCard","o","name","cardTuple","getCardByName","amount","cardLine","tokens","cardName","slice","join","cardAmount","Number","providedIn","MtgService","mtgCard","externalId","imgUrl","cmc","manaCost","oracle","rarity","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import * as env from './env';\nimport { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { DeckMeta } from './model/deck';\nimport { DeckService } from './services/deck.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent implements OnInit {\n  readonly env = env;\n  title = 'yawgmoth';\n  meta$: Observable<DeckMeta>;\n\n  constructor(private deckService: DeckService) { }\n\n  ngOnInit(): void {\n    this.meta$ = this.deckService.list();\n  }\n}\n","<h1>\n  <span class=\"dot w\"></span>\n  <span class=\"dot u\"></span>\n  <span class=\"dot b\"></span>\n  <span class=\"dot r\"></span>\n  <span class=\"dot g\"></span>\n  {{title}}\n</h1>\n<div *ngFor=\"let meta of (meta$ | async)\">\n  <ygm-deck [meta]=\"meta\"></ygm-deck>\n  <div *ngIf=\"env.DEBUG\">{{meta | json}}</div>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { DeckComponent } from './components/deck/deck.component';\nimport { SpinnerCardComponent } from './components/spinner-card/spinner-card.component';\nimport { ManaComponent } from './components/mana/mana.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DeckComponent,\n    SpinnerCardComponent,\n    ManaComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Deck, DeckMeta } from '../../model/deck';\nimport { Card } from '../../model/card';\nimport { DeckService } from '../../services/deck.service';\n\n@Component({\n  selector: 'ygm-deck',\n  templateUrl: './deck.component.html',\n})\nexport class DeckComponent implements OnInit {\n  @Input() meta: DeckMeta;\n  deck$: Observable<Deck>;\n  selectedCard$: Subject<Card>;\n\n  constructor(private deckService: DeckService) { }\n\n  ngOnInit(): void {\n    this.deck$ = this.deckService.getOne(this.meta.id);\n    this.selectedCard$ = new Subject<any>();\n    this.deck$.pipe(\n      map((deck: Deck) => deck.cards[0]),\n      tap(card => this.selectedCard$.next(card))\n    );\n  }\n\n}\n","<h3>{{meta.name}}</h3>\n<div class=\"row\">\n  <section class=\"preview\">\n    <ygm-spinner-card [card]=\"selectedCard$\"></ygm-spinner-card>\n  </section>\n  <section class=\"card list\">\n    <ul>\n      <li *ngFor=\"let card of (deck$ | async)?.cards\">\n        {{card.amount}}\n        <a (click)=\"selectedCard$.next(card)\">{{card.name}}</a>\n        <ygm-mana [cost]=\"card.manaCost\"></ygm-mana>\n      </li>\n    </ul>\n  </section>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'ygm-mana',\n  templateUrl: './mana.component.html',\n})\nexport class ManaComponent implements OnInit {\n  @Input() cost: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  manaClasses(): string[][] { // TODO: compute on @Input setter\n    return this.cost.split(/{(.*?)}/)\n      .filter(str => str.trim() != \"\")\n      .map(token => token.toLowerCase().replace('/', ''))\n      .map(cost => ['ms', 'ms-cost', 'ms-'+cost]);\n  }\n}\n","<div class=\"mana\">\n  <i *ngFor=\"let symbols of manaClasses()\" [ngClass]=\"symbols\"></i>\n</div>\n\n","import { Component, OnInit, Input } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'ygm-spinner-card',\n  templateUrl: './spinner-card.component.html',\n})\nexport class SpinnerCardComponent implements OnInit {\n  @Input() card: Observable<string>;\n  spinnerCard: string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.spinnerCard = this.randomSpinner();\n  }\n\n  private randomSpinner() {\n    const spinners = [\"angel\", \"embalmed\", \"exerted\", \"goat\", \"knight ally\", \"soldier\", \"squirrel\", \"thopter\", \"angel\"];\n    return \"assets/tokens/\" + spinners[Math.floor(Math.random()*spinners.length)] + \".gif\";\n  }\n\n}\n","<div *ngIf=\"(card | async) as card\">\n  <!--<img src=\"http://gatherer.wizards.com/Handlers/Image.ashx?multiverseid=409619&amp;type=card\" />-->\n  <img src=\"{{card.imgUrl}}\" />\n</div>\n<div *ngIf=\"!(card | async)\">\n  <img src=\"{{spinnerCard}}\" />\n</div>\n","'use strict';\r\n\r\nexport const DEBUG=true;\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { of, Observable, forkJoin } from 'rxjs';\nimport { concatMap, flatMap, mergeMap, map, switchMap, tap, zip } from 'rxjs/operators';\nimport { MtgService } from './mtg.service';\nimport { Deck, DeckMeta } from '../model/deck';\nimport { Card } from '../model/card';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DeckService {\n\n  constructor(\n    private http: HttpClient,\n    private mtgService: MtgService) { }\n\n  public list(): Observable<DeckMeta> {\n    return this.http.get<DeckMeta>('assets/decks.json');\n  }\n\n  public getOne(deckId: string): Observable<Deck> {\n    return this.http.get('assets/decks/'+deckId+'.txt', { responseType: 'text' as 'json'}).pipe(\n      map((deckTxt: string) => {\n        const cards$ = deckTxt.split(/\\r?\\n/)\n            .filter(str => str && str.length > 0)\n            .map(line => this.parseCardLine(line))\n            .map(proto => this.getCard(proto)) // [Observable<Card>]\n        return forkJoin(cards$); // Observable<Card[]>\n      }),\n      flatMap(o => o),\n      map(cards => ({name: deckId, cards: cards})),\n    );\n  }\n\n  private getCard(cardTuple:{name: string, amount: number}): Observable<Card> {\n    return this.mtgService.getCardByName(cardTuple.name).pipe(\n      map(card => ({...card, amount: cardTuple.amount}))\n    );\n  }\n\n  private parseCardLine(cardLine: string):{name: string, amount: number} {\n    const tokens = cardLine.split(' ');\n    const cardName = tokens.slice(1).join(' ');\n    const cardAmount = Number(tokens[0]);\n    return { name: cardName, amount: cardAmount };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { of, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { Card } from '../model/card';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MtgService {\n\n  constructor(private http: HttpClient) { }\n\n  public getCardByName(cardName: string): Observable<Card> {\n    return this.http.get('https://api.scryfall.com/cards/named?exact='+cardName).pipe(\n      map(mtgCard => ({\n        externalId: mtgCard['id'],\n        name: mtgCard['name'],\n        imgUrl: mtgCard['image_uris']['normal'], //small, normal, large, png, art_crop, border_crop\n        cmc: mtgCard['cmc'],\n        manaCost: mtgCard['mana_cost'],\n        oracle: mtgCard['oracle_text'],\n        rarity: mtgCard['rarity'],\n        amount: 1,\n      }))\n    );\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}